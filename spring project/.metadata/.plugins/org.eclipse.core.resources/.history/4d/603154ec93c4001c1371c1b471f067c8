package com.example.demo.studentexception;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;


@ControllerAdvice
public class GeneralException extends ResponseEntityExceptionHandler{

	/*@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public java.util.Map<String,String> handleValidationExceptions(MethodArgumentNotValidException ex){
		java.util.Map<String, String> errors = new HashMap<>();
		ex.getBindingResult().getAllErrors().forEach((error)->{
			String fname = ((FieldError)error).getField();
			String errorMessage = error.getDefaultMessage();
			errors.put(fname, errorMessage);
		});
		return errors;
	}
	*/
	
//	@ExceptionHandler(value = {MethodArgumentNotValidException.class})
//	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status,	WebRequest request){
		
		Map<String, String> errors = new HashMap<>();
		ex.getBindingResult().getAllErrors().forEach((error)->{
			
			String fieldName = ((FieldError)error).getField();
			String message = error.getDefaultMessage();
			errors.put(fieldName, message);
			
		});
		return new ResponseEntity<Object>(errors,HttpStatus.BAD_REQUEST);
		
	}
	
	
}
